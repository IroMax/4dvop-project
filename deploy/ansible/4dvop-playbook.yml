---

# ----------------------------------------------------------
#                ALL VM except jdac
# ----------------------------------------------------------

- name: Install docker
  hosts: all:!jdac
  become: true
  tags:
    - install-requirements

  pre_tasks:
    - name: Install epel-release
      yum:
        name: epel-release
        state: latest

    - name: install the 'Development tools' package group
      yum:
        name: "@Development tools"
        state: present

    - name: Python-devel
      yum:
        name: python-devel
        state: present

    - name: Install python pip
      yum:
        name: python-pip
        state: latest

    - name: Install docker
      pip:
        name: docker

  tasks:
    - include_role:
        name: docker-setup-role

# ----------------------------------------------------------
#                REGISTRY VM
# ----------------------------------------------------------

- name: Deploy registry, private docker registry
  hosts: registry
  become: true
  tags:
    - deploy-registry

  tasks:
    - name: Deploy private registry task
      docker_container:
        name: registry-ctn
        image: registry
        state: started
        ports:
          - "8000:5000"

    - name: Deploy docker registry frontend task
      docker_container:
        name: registry-frontend-ctn
        state: started
        image: konradkleine/docker-registry-frontend:v2
        ports:
          - "80:80"
        env:
          ENV_DOCKER_REGISTRY_HOST: registry-ctn
          ENV_DOCKER_REGISTRY_PORT: "5000"
          FRONTEND_BROWSE_ONLY_MODE: "false"

    - name: Create a registry-network network and connect containers
      docker_network:
        name: registry-network
        connected:
          - registry-ctn
          - registry-frontend-ctn

# -------------------------------------------------------------
#                LOCAL build AND PUSH TO REGISTRY images VM
# -------------------------------------------------------------

- name:  Install requirements, Build api and studentlist
  hosts: jdac
  become: true
  tags:
    - build-simple-api-and-website

  pre_tasks:
    - name: install Docker compose task in local
      pip:
        name: docker
        state: present

    - name: Docker-compose installation task in local
      pip:
        name: docker-compose
        state: present

  tasks:
    - name: Build docker compose yaml file task
      docker_compose:
        project_src: "{{project_path}}/appli"
        build: yes
      register: output

 #----------------------------------------------------------
 #     TEST simple api and stop container - VM DEPLOY
 #----------------------------------------------------------

- name:  curl check
  hosts: deploy
  tags:
    - test-simple-api-stop
  tasks:
    - name: Run check api
      uri:
        url: http://localhost:5002/pozos/api/v1.0/get_student_ages
        user: toto
        password: python
        method: GET
        status_code: 200

# Lancement de la tache avec un curl
#  tasks:
#    - name: Run check api
#      shell:
#        cmd: curl -u toto:python -X GET http://localhost:5002/pozos/api/v1.0/get_student_ages


# -----------------------------------------------------------------
#                STOP API AND STUDENTLIST containers in JDAC VM
# -----------------------------------------------------------------

- name:  Stop Running containers (api and studentlist)
  hosts: jdac
  become: true
  tags:
    - test-simple-api-stop

  tasks:
    - name: Stop api and studentlist containers task
      docker_compose:
        project_src: '{{project_path}}/appli'
        stopped: yes

## ----------------------------------------------------------
##                CLAIR SCAN Build
## ----------------------------------------------------------

- name:  Clair Scan - Security testing
  hosts: jdac
  tags:
    - clair
  tasks:
    - name: Run clair task
      docker_compose:
        project_src: '{{project_path}}/deploy/clair'
        build: yes
      register: output

    - name: Run clair job
      shell: |
            if clair-scanner --clair="http://clair:6060" --ip jdac simple-api:latest
            then
              exit 1
            else
              exit 0
            fi

## ----------------------------------------------------------
##      PUSH images to registry - JDAC VM
## ----------------------------------------------------------

- name:  Push images to registry
  hosts: jdac
  tags:
    - push-images
  tasks:
    - name: Push api to docker private registry task
      docker_image:
        name: 192.168.48.12:8000/simple-api
        tag: v1
        push: yes
        source: local

    - name: Tag php apache app image and push to registry task
      docker_image:
        name: php:apache
        repository: 192.168.48.12:8000/php:apache
        force_tag: yes
        push: yes
        source: local

## ----------------------------------------------------------
##      RUN apps  - APP VM
## ----------------------------------------------------------

- name:  Run applications
  hosts: app
  become: true
  tags:
    - run-app

  tasks:

    - name: Create a app-network network
      docker_network:
        name: app-network

    - name: Run api container
      docker_container:
        name: api
        image: 192.168.48.12:8000/simple-api:v1
        ports:
          - "5001:5000"
        networks:
          - name: app-network

    - name: Run studentlist frontend app container
      docker_container:
        name: app-ctn
        image: 192.168.48.12:8000/php:apache
        ports:
          - "3000:80"
        networks:
          - name: app-network

    - name: copy website files to html folder
      copy:
        src: '{{project_path}}/appli/website'
        dest: '{{home_path}}'

    - name: Copy website files from host to container
      shell:
        cmd: 'docker cp {{home_path}}/website/index.php app-ctn:/var/www/html/index.php'

    - name: Some clean up
      file:
        path: '{{home_path}}/website'
        state: absent


## -------------------------------------------------------------------
##      RUN SECURITY TESTING simple api and stop container - VM APP
## -------------------------------------------------------------------

- name:  run the security test to ensure the application is secure (E2E Tests)
  hosts: app
  tags:
    - e2e-testing
  tasks:
    - name: Pull gauntlt/gauntlt image
      docker_image:
        name: gauntlt/gauntlt
        source: pull

    - name: copy attaque file to app vm
      copy:
        src: '{{project_path}}/xss.attack'
        dest: '{{home_path}}/xss.attack'

    - name: Run security testing to studentlist app
      shell:
        cmd: 'docker run -t --rm=true -v {{home_path}}:/working -w /working gauntlt/gauntlt ./xss.attack'


## ----------------------------------------------------------
##      DEPLOY SPLUNK CONTAINER -- DEPLOY VM
## ----------------------------------------------------------

- name:  Deploy Splunk container
  hosts: deploy
  tags:
    - splunk
  tasks:
    - name: Deploy Splunk task
      docker_container:
        name: splunk
        image: splunk/splunk
        ports:
          - "8000:8000"
          - "9998:9997"
        env:
          SPLUNK_START_ARGS: "--accept-license"
          SPLUNK_PASSWORD: Splunk12345


